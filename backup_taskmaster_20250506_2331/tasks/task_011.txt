# Task ID: 11
# Title: Deployment Descriptors & CI/CD Bootstrap
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create deployment configuration files and CI/CD workflows to enable automatic deployment of preview environments for both frontend and backend components.
# Details:
This task involves setting up several configuration files to enable automated deployments:

1. **Frontend Configuration**:
   - Create `frontend/vercel.json` with edge rewrites configuration to properly handle API requests and SPA routing
   - Configure project settings for Vercel deployment

2. **Backend Configuration**:
   - Create `backend/Dockerfile` that properly builds and runs the FastAPI+AGNO application
   - Include appropriate base image, dependency installation, and runtime configuration
   - Set up proper health check endpoints

3. **Cloud Hosting Configuration**:
   - Create either `render.yaml` or `fly.toml` in the project root to define backend service deployment
   - Configure environment variables, scaling options, and resource allocation
   - Set up database connections if applicable

4. **CI/CD Workflow**:
   - Create `.github/workflows/deploy.yml` to automate the deployment process
   - Configure workflow to run tests before deployment
   - Set up branch-based preview deployments
   - Include steps to deploy to both Vercel (frontend) and Render/Fly.io (backend)
   - Add status checks and notifications

Ensure all configuration files follow best practices for security and performance.

# Test Strategy:
1. Create a new feature branch and push the configuration files
2. Verify that GitHub Actions workflow is triggered automatically
3. Check that tests are executed as part of the workflow
4. Confirm that preview environments are created for both frontend and backend
5. Validate the Vercel preview URL by:
   - Testing the application's core functionality
   - Verifying that API requests are properly routed
   - Checking that SPA navigation works correctly
6. Validate the Render/Fly.io preview URL by:
   - Accessing the health check endpoint
   - Testing API endpoints for correct responses
   - Verifying that environment variables are properly set
7. Make a small change to both frontend and backend code and push again
8. Confirm that the preview environments are updated automatically
9. Test cross-component integration by having the frontend preview connect to the backend preview
